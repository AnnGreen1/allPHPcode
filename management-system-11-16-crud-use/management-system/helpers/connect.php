<?php
/*
 * @Description: 数据库配置文件
 * @Version: 1.0
 * @Author: Humbert Cheung
 * @Date: 2021-10-19 09:08:39
 * @LastEditors: [Humbert Cheung]
 * @LastEditTime: 2021-11-01 14:06:56
 * @FilePath: /management-system-all/backend/server/common/connect.php
 * Copyright (C) 2021 syzhang. All rights reserved.
 */
// 数据库配置参数
$config = array(
  'dsn' => 'mysql:host=localhost;dbname=myplatform;port=3306;charset=utf8',
  'username' => 'root',
  //'password' => '123456'
  'password' => ''
);

//  数据库连接属性
$option = array(
  PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION, // 默认是 ：PDO::ERRMODE_SILENT,
  PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
);

// 连接数据库
try {
  $pdo = new PDO($config['dsn'], $config['username'], $config['password'], $option);
} catch (PDOException $e) {
  die('数据库连接失败' . $e->getMessage());
}















// 选择
// 35C、41AC、45D、*47D、49A、66B、*86C、87D、89C、90C、99A、108A
// 以下说法错误的是（）D. 父类中的方法被声明为 final，子类可以覆盖该方法
// 在PHP面向对象中，下面关于final修饰符描述错误的是D. 使用final标识的成员属性，不能在子类中再次定义
// PDO提供了多种不同的错误处理模式，不仅可以满足不同风格的编程，也可以调整扩展处理错误的方式。C. PDO::ERRMODE_ERROR
// PDO::ATTR_ERRMODE设置为以下哪个值时，PDO会抛出PDOException?（）C. PDO::ERRMODE_EXCEPTION





/******************************************************************************************************************************************************************************************************************
*******************************************************************************************************************************************************************************************************************/

// 预定义变量（超全局变量）：即系统自己定义好的变量，也就是系统内置的一些变量，我们可以直接使用。
// 预定义变量（超全局变量）的作用域称为“超全局作用域”，全局作用域+局部作用域，函数内外都可以用
// php的超全局变量：
// $GLOBALS	用于记录全局变量
// $_SERVER		记录服务器端与客户端的相关信息
// $_REQUEST	用于接收前台表单使用get或post方式提交的数据
// $_POST		用于接收前台表单使用post方式提交的数据
// $_GET		用于接收前台表单使用get方式提交的数据
// $_FILES		记录用户上传的文件信息
// $_ENV		一个包含服务器端环境的数组
// $_COOKIE	一种会话技术
// $_SESSION	一种会话技术

/******************************************************************************************************************************************************************************************************************
*******************************************************************************************************************************************************************************************************************/

// 文件引入
// require、require_once、include、include_once
/*
require
require(文件名)
require_once(文件名)
括号加不加都可以

require "a.php";
require ("a.php");
require_once "b.php";
require_once ("b.php");

include(文件名)
include_once(文件名)
*/

/*
require和include的区别
include在引入文件时，如果被引入的文件不存在，则会报错，但是后面的程序仍然会正常执行
require在引入文件时，如果被引入的文件不存在会中断程序的执行


require一般用于引入php文件，因为php文件里面一般写功能性代码
include一般用于引入html文档
*/



/*
rquire、include与require_once、include_once的区别
require_once、include_once每次引入入之前都会检查被引入的文件是否被引入过，如果已经被引入过则不会再次引入
require、include没有这个检查的过程，每次执行都会引入
*/

/******************************************************************************************************************************************************************************************************************
*******************************************************************************************************************************************************************************************************************/

// 单例模式
// 单例模式是一种常用的软件设计模式，在它的核心结构中只包含一个被称为单例的特殊类
// 通过单例模式可以保证系统中一个类只有一个实例，级一个类只有一个对象实例
// 优点：因为在内存里只有一个实例，因此一定程度上可以减少内存的开销，
// 尤其是频繁的创建和销毁实例，避免对资源的多重占用
// 实现单例模式
// 注意点：
// 1、一个类只能有一个对象被创建和访问；
// 2、必须是自行创建这个类的对象；
// 3、要向整个系统提供这一个对象。
// 实现思路：
// 1、单例模式的类只提供私有构造函数  
// 2、类定义中含有一个该类的静态私有对象属性
// 3、该类提供一个静态的公共函数用于创建或获取它的静态私有对象。

/******************************************************************************************************************************************************************************************************************
*******************************************************************************************************************************************************************************************************************/

// MVC概述
// MVC（Model-View-Controller）是一种软件工程架构模式，
// 把软件系统分为三个基本部分：模型（Model）、视图（View）、控制器（Controller）

// 模型（Model）管理大部分的业务逻辑和所有的数据库逻辑，提供了连接和操作数据库的抽象层
// 控制器（Controller）负责响应用户请求、准备数据，以及决定如何战展示数据
// 视图（View）负责渲染数据，通过HTML方式呈现给用户

// MVC 的结构清晰，耦合性低，大型项目代码的复用性得到极大的提高，开发人员分工明确，提高了开发的效率，维护方便，降低了维护成本
// 简单的小型项目，使用MVC设计反而会降低开发效率，层和层虽然相互分离，但是之间关联性太强，没有做到独立的重用

/******************************************************************************************************************************************************************************************************************
*******************************************************************************************************************************************************************************************************************/



// 1、新建项目，文件夹(app(controller、model、view)、cache(smarty(cached、complied))、helpers(setup.php)、third_party(smarty(smarty文件))、index.php(入口文件))
// 2、配置setup.php文件
// 3、配置DB.php文件
// 4、在index.php文件下实例化smarty对象、写获取控制器和操作的三目运算符
// 5、直接使用eval()函数引入控制器文件、实例化控制器、让实例化出的对象调用方法